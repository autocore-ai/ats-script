# -*- coding:utf8 -*-
"""生成图片"""

import numpy as np
import matplotlib.path as mpath
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
import numpy
import traceback
import logging
logger = logging.getLogger()


def generate_bar(data_list, save_path, x_value=[], x_label='', y_label='', title=''):
    """
    generate bar
    data_list = [{‘data’: [1, 2, 3], 'label': 'expect uuid count/second'}, {‘data’: [1, 2, 3], 'label': 'expect uuid count/second'},]
    """
    if not data_list:
        return False, 'data_list can not be empty'

    fig, ax = plt.subplots(figsize=(10, 8))
    # x axis value
    if x_value:
        x = x_value
    else:
        x = np.arange(1, len(data_list[0]['data'])+1)  # the label locations
    width = 0.2  # the width of the bars

    for i, data in enumerate(data_list):
        if i % 2 == 0:
            rects = ax.bar(x - width / 2, data['data'], width, label=data['label'])
        else:
            rects = ax.bar(x + width / 2, data['data'], width, label=data['label'])
        auto_label(ax, rects)

    if x_label:
        ax.set_xlabel(x_label)
    if y_label:
        ax.set_ylabel(y_label)
    if title:
        ax.set_title(title)
    ax.legend()
    fig.tight_layout()
    # plt.show()
    fig.savefig(save_path, dpi=600)
    return True, ''


def generate_bar_rows(data_list, save_path):
    """
    generate bar rows
    data_list = [
        { data: {label1: [1, 2, 3], label2: [1, 2, 3]}, 'x_label': x, 'x_value':[], 'x_label':'', y_label:'', title:''},
        { data: {label1: [1, 2, 3], label2: [1, 2, 3]}, 'x_label': x, 'x_value':[], 'x_label':'', y_label:'', title:''},
        { data: {label1: [1, 2, 3], label2: [1, 2, 3]}, 'x_label': x, 'x_value':[], 'x_label':'', y_label:'', title:''},
    ]
    几个list几个横向图
    """
    if not data_list:
        return False, 'data_list can not be empty'
    # row number
    row = len(data_list)
    fig, ax_list = plt.subplots(row, 1, figsize=(10, 5*row))

    for i, item in enumerate(data_list):
        if isinstance(ax_list, list):
            ax = ax_list[i]
        else:
            ax = ax_list
        d_dict = item['data']
        # x axis value
        if 'x_value' in item and item['x_value']:
            x = item['x_value']
        else:
            x = np.arange(1, len(list(d_dict.values())[0])+1)  # the label locations
        width = 0.2  # the width of the bars

        j = 0
        for label, data in d_dict.items():

            if j % 2 == 0:
                rects = ax.bar(x - width / 2, data, width, label=label)
            else:
                rects = ax.bar(x + width / 2, data, width, label=label)
            auto_label(ax, rects)
            j += 1

        if 'x_label' in item and item['x_label']:
            ax.set_xlabel(item['x_label'])
        if 'v' in item and item['y_label']:
            ax.set_ylabel(item['y_label'])
        if 'title' in item and item['title']:
            ax.set_title(item['title'])
        ax.legend()
    fig.tight_layout()
    # plt.show()
    fig.savefig(save_path, dpi=600)
    return True, ''


def auto_label(ax, rects):
    """Attach a text label above each bar in *rects*, displaying its height."""
    for rect in rects:
        height = rect.get_height()
        ax.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')


def generate_trace_rows(data_list, save_path):
    """画出多行轨迹图
    data_list: [
        {
            'trace_title': 'BUS trace',
            'trace_dict': {'BUS_exp': [(x1, y1), (x2, y2)], 'BUS_real': [(x1, y1), (x2, y2)]}
        },
        {
            'trace_title': 'CAR trace',
            'trace_dict': {'CAR_exp': [(x1, y1), (x2, y2)], 'CAR_real': [(x1, y1), (x2, y2)]}
        },
    ]
    """
    try:
        # position 轨迹图
        row = len(data_list)
        fig, ax_list = plt.subplots(row, 1, figsize=(10, 5*row))  # 位置 轨迹图

        # position 轨迹图
        Path = mpath.Path
        # 循环轨迹
        for i, d_dict in enumerate(data_list):  # 循环每一行的轨迹，得到某行的轨迹数据
            # {
            #             'trace_title': 'BUS trace',
            #             'trace_dict': {'BUS_exp': [(x1, y1), (x2, y2)], 'BUS_real': [(x1, y1), (x2, y2)]}
            #         }
            title = d_dict['trace_title']  # 轨迹图的title
            trace_dict = d_dict['trace_dict']  # 轨迹数据，包含有多个轨迹数据

            if isinstance(ax_list, list):
                ax = ax_list[i]
            else:
                ax = ax_list

            # 循环某轨迹的单个元素，组成path
            for label, trace_list in trace_dict.items():
                # label: 'BUS_exp'
                # trace_list: [(x1, y1), (x2, y2)]
                path_data = []
                c_f = 0
                for x, y in trace_list:  # 循环具体的轨迹
                    # print((x, y))
                    if c_f == 0:
                        path_data.append((Path.MOVETO, (x, y)))
                    elif c_f == len(trace_list):
                        path_data.append((Path.CLOSEPOLY, (x, y)))
                    # elif c_f == 2:
                    #     path_data.append((Path.LINETO, (x, y)))
                    else:
                        path_data.append((Path.CURVE4, (x, y)))
                    c_f += 1

                # print(path_data)
                # 画图
                codes, verts = zip(*path_data)
                path = mpath.Path(verts, codes)
                # patch = mpatches.PathPatch(path, facecolor='r', alpha=0.5)
                # ax_position.add_patch(patch)
                x, y = zip(*path.vertices)
                ax.plot(x, y, marker=mpath.Path(verts, codes), label=label)  # 画轨迹
                ax.text(x[-1], y[-1], label)  # 最后一个点显示文字

            # 保存位置轨迹图
            ax.grid()
            # ax.axis('equal')
            ax.set_title(title)
            ax.legend()
        # plt.show()
        fig.savefig(save_path, dpi=600)
    except Exception as e:
        # traceback.print_exc()
        logger.exception(e)
        return False, '%s' % traceback.format_exc()
    return True, ''


def generate_line_rows(data_list, save_path):
    """
    画多行两列的折线图
    行数由data_dict1的元素个数确性
    data_dict1和data_dict2的元素个数是相等的
    data_list = [
        (
            {title: CAR_Shape_X, data: {'shape_exp_x': [2, 3, 4, 2], 'shape_real_x': [2, 3, 4, 2], 'shape_diff_x': [2, 3, 4, 2]}},
            {title: CAR_Shape_Y, data: {'shape_exp_y': [2, 3, 4, 2], 'shape_real_y': [2, 3, 4, 2], 'shape_diff_y': [2, 3, 4, 2]
        ),
        (
            {title: BUS_Shape_X, data: {'shape_exp_x': [2, 3, 4, 2], 'shape_real_x': [2, 3, 4, 2], 'shape_diff_x': [2, 3, 4, 2]}},
            {title: BUS_Shape_Y, data: {'shape_exp_y': [2, 3, 4, 2], 'shape_real_y': [2, 3, 4, 2], 'shape_diff_y': [2, 3, 4, 2]
        )
        ]
    """
    # logger.info(data_list)
    row = len(data_list)
    if isinstance(data_list[0], dict):
        col = 1
    else:
        col = len(data_list[0])
    # logger.info(row)
    # logger.info(col)
    # print(row)
    # print(col)
    fig, ax_list = plt.subplots(row, col, figsize=(10, 5 * row))  # 位置 轨迹图
    # logger.info(type(ax_list))
    # print(type(ax_list))
    # if issubclass(ax_list, matplotlib.axes.SubplotBase):
    if isinstance(ax_list, numpy.ndarray):
        ax_list = ax_list.tolist()
    # begin to make line graph
    for i, data_tuple in enumerate(data_list):
        if row == 1:
            ax = ax_list
        else:
            ax = ax_list[i]
        # logger.info(data_tuple)
        if isinstance(data_tuple, tuple):
            for j, data_dict in enumerate(data_tuple):
                # print(data_dict)
                # 先画 CAR_Shape_X
                axe = ax
                if col != 1:
                    axe = ax[j]
                title = data_dict['title']
                data = data_dict['data']
                for label, l in data.items():
                    data_len = len(l) + 1
                    axe.plot(range(1, data_len), l, label=label)
                axe.grid()
                # axe.axis('equal')
                # axe.set_xlim(0, data_len+1)
                axe.set_title(title)
                axe.legend()
        else:
            title = data_tuple['title']
            data = data_tuple['data']
            for label, l in data.items():
                data_len = len(l) + 1
                ax.plot(range(1, data_len), l, label=label)
            ax.grid()
            # ax.axis('equal')
            # ax.set_xlim(0, data_len + 1)
            ax.set_title(title)
            ax.legend()
    # plt.show()
    fig.savefig(save_path, dpi=600)
    return True, ''


def generate_pre_path_row(data_dict, save_path):
    """
    for pre path
    data_dict:
    { 'CAR':
        [
                # the 2nd pre path
                (
                    # xy trace
                    {
                        'title': 'The 2nd xy trace of {}\'s Prediction Path'.format(semantic),
                        'trace_dict': {'{}_xy_exp'.format(semantic): exp_2th_xy,
                                       '{}_xy_real'.format(semantic): real_2th_xy
                                       }
                     },
                    # xy eul line graph
                    {
                        'title': 'The 2nd xy eul of {}\'s, std: {}'.format(semantic, paths_std_2th_xy),
                        'line_data': {'{}_xy_eul'.format(semantic): paths_diff_2th_xy}
                    },
                    # ori line (exp, real, diff)
                    {
                        'title': 'The 2nd orientation of {}\'s, std: {}'.format(semantic, paths_std_2th_ori),
                        'line_data': {'{}_ori_exp'.format(semantic): exp_2th_ori,
                                      '{}_ori_real'.format(semantic): real_2th_ori,
                                      '{}_ori_diff'.format(semantic): paths_diff_2th_ori}
                    }
                ),
                # the 3rd pre path
                (
                    # xy trace
                    {
                        'title': 'The 3nd xy trace of {}\'s Prediction Path'.format(semantic),
                        'trace_dict': {'{}_xy_exp'.format(semantic): exp_3th_xy,
                                       '{}_xy_real'.format(semantic): real_3th_xy
                                       }
                    },
                    # xy eul line graph
                    {
                        'title': 'The 3nd xy eul of {}\'s, std: {}'.format(semantic, paths_std_3th_xy),
                        'line_data': {'{}_xy_eul'.format(semantic): paths_diff_3th_xy}
                    },
                    # ori line (exp, real, diff)
                    {
                        'title': 'The 3nd orientation of {}\'s, std: {}'.format(semantic, paths_std_3th_ori),
                        'line_data': {'{}_ori_exp'.format(semantic): exp_3th_ori,
                                      '{}_ori_real'.format(semantic): real_3th_ori,
                                      '{}_ori_diff'.format(semantic): paths_diff_3th_ori}
                    }
                ),
            ]
    }
    """
    sem_count = len(data_dict.keys())
    row = sem_count * 2  # 2nd and 3rd
    col = 3
    fig, ax_list = plt.subplots(row, col, figsize=(15, 5 * row))  # 位置 轨迹图
    # begin to make graph
    Path = mpath.Path
    i = 0
    for sem, data_list in data_dict.items():
        ax_tuple = ax_list[i:i+2]
        i += 1
        for j, data_tuple in enumerate(data_list):
            # xy trace
            # xy eul line
            # orientation line
            ax_trace = ax_tuple[j][0]
            ax_eul_line = ax_tuple[j][1]
            ax_ori_line = ax_tuple[j][2]

            # trace
            trace_title = data_tuple[0]['title']
            trace_dict = data_tuple[0]['trace_dict']
            for label, d in trace_dict.items():
                path_data = []
                c_f = 0
                for x, y in d:
                    if c_f == 0:
                        path_data.append((Path.MOVETO, (x, y)))
                    elif c_f == len(d):
                        path_data.append((Path.CLOSEPOLY, (x, y)))
                    else:
                        path_data.append((Path.CURVE4, (x, y)))
                    c_f += 1
                codes, verts = zip(*path_data)
                path = mpath.Path(verts, codes)
                x, y = zip(*path.vertices)
                ax_trace.plot(x, y, marker=mpath.Path(verts, codes), label=label)  # 画轨迹
                ax_trace.text(x[-1], y[-1], label)
            ax_trace.set_title(trace_title)
            ax_trace.grid()
            ax_trace.legend()

            # ax_eul_line
            eul_title = data_tuple[1]['title']
            eul_line_dict = data_tuple[1]['line_data']
            for label, d in eul_line_dict.items():
                data_len = len(d) + 1
                ax_eul_line.plot(range(1, data_len), d, label=label)
            ax_eul_line.set_title(eul_title)
            ax_eul_line.grid()
            ax_eul_line.legend()

            # ax_ori_line
            ori_title = data_tuple[2]['title']
            ori_line_dict = data_tuple[2]['line_data']
            for label, d in ori_line_dict.items():
                data_len = len(d) + 1
                ax_ori_line.plot(range(1, data_len), d, label=label)
            ax_ori_line.set_title(ori_title)
            ax_ori_line.grid()
            ax_ori_line.legend()

    fig.savefig(save_path, dpi=600)
    return True, ''



if __name__ == '__main__':
    # generate_bar([{'data': [1, 2, 3, 4], 'label': 'test1 '}, {'data': [1, 2, 13, 4], 'label': 'test2'}], '')
    # data_list = [
    #     {'data': {'label1': [1, 2, 13], 'label2': [1, 2, 3]}, 'title': 'title1'},
    #     {'data': {'label1': [1, 2, 3], 'label2': [1, 2, 3]}, 'title': 'title1'},
    #     {'data': {'label1': [1, 2, 3], 'label2': [1, 2, 3]}, 'title': 'title1'},
    # ]
    # generate_bar_rows(data_list, './semantic.png')
    # data_list = [
    #     {
    #         'trace_title': 'BUS trace',
    #         'trace_dict': {'BUS_exp': [(2,3), (5,7)], 'BUS_real': [(2,3), (5,7)]}
    #     },
    #     {
    #         'trace_title': 'CAR trace',
    #         'trace_dict': {'CAR_exp': [(2,3), (5,7)], 'CAR_real': [(-2,-3), (-5,-7)]}
    #     },
    # ]
    # generate_trace_row(data_list, './position.png')
    from numpy import array

    data_list = [{'title': 'CAR_Orientation', 'data': {'ori_exp': [-157.5856556845764, -157.5581582504711, -157.5581582504711, -157.5581582504711, -157.5581582504711, -157.5581582504711, -157.5581582504711, 130.65296729621832, 129.204426163212, 127.86762754047659, 128.34095192846854, 129.21515239256763, 130.27552625501937, 130.27552625501937, 130.27552625501937, 130.27552625501937, 130.27552625501937, 83.19632373924034, 84.07317851773193, 87.32637139288978, 89.9408626507176, 92.22053759815171, 88.17587502680117, 86.12301088747995, 85.64663068735595, 85.91566083460897, 86.54476694639892, 86.54476694639892, 86.54476694639892, 86.54476694639892, 86.54476694639892, 0.6963811312805892, -11.773770460401465, -15.2301223875868, -14.94545285026973, -13.665751107613602, -12.269875860149455, -12.269875860149455, -12.269875860149455, -12.269875860149455, -36.94580209630155, -41.01345004286977, -42.21977885286649, -41.306805609072676, -40.273530147395434, -40.924673036047096, -42.1880196286987, -42.58499796258567, -42.50916704582054, -42.13542542067777, -49.26390179012313, -55.673238516602126, -58.597723730191234, -62.947335203610756, -66.40567778789361, -68.71106005675212, -71.07106999425703, -71.38909743893211, -74.26642926380293, -75.10248854609773, -74.81070663781442], 'ori_real_x': [-174.90212790723533, -174.90212790723533, -174.90212790723533, -174.90212790723533, -174.90212790723533, -172.6971716890008, -172.41249429005885, -176.51023510253958, -176.51023510253958, -176.51023510253958, -176.51023510253958, -176.51023510253958, -176.51023510253958, -176.51023510253958, -176.51023510253958, -177.7475088848465, 8.408173219109335, 8.408173219109335, 8.408173219109335, 8.408173219109335, 175.39718675597712, 8.39612716810907, 8.39612716810907, 8.39612716810907, 8.39612716810907, 8.39612716810907, 8.39612716810907, 8.39612716810907, 8.39612716810907, -177.91534034349135, -177.91534034349135, -177.91534034349135, -177.91534034349135, -177.91534034349135, -174.43299038958347, -174.43299038958347, -172.59505786179858, -179.43306960944145, -179.43306960944145, -179.43306960944145, -179.43306960944145, 39.257889140809134, 13.217471496332085, 13.217471496332085, -177.73454427545232, 179.39732343394553, 31.52212231309976, 175.41890442009824, 175.41890442009824, 179.35181508953374, 179.35181508953374, 179.35181508953374, -174.5921468902928, -174.5921468902928, -174.5921468902928, -174.5921468902928, -174.5921468902928, -174.5921468902928, -174.5921468902928, -174.5921468902928, -73.55287107534835], 'ori_diff_x': [17.316472222658916, 17.343969656764216, 17.343969656764216, 17.343969656764216, 17.343969656764216, 15.139013438529702, 14.854336039587736, 307.1632023987579, 305.7146612657516, 304.37786264301616, 304.8511870310081, 305.7253874951072, 306.78576135755895, 306.78576135755895, 306.78576135755895, 308.0230351398659, 121.86735303591004, 74.78815052013101, 75.6650052986226, 78.91819817378045, 85.45632410525951, 83.82441043004263, 79.77974785869209, 77.72688371937087, 77.25050351924688, 77.5195336664999, 78.14863977828985, 78.14863977828985, 78.14863977828985, 264.4601072898903, 264.4601072898903, 178.61172147477194, 166.1415698830899, 162.68521795590456, 159.48753753931373, 160.76723928196986, 160.32518200164913, 167.163193749292, 167.163193749292, 167.163193749292, 142.4872675131399, 80.2713391836789, 55.43725034919858, 54.524277105404764, 137.4610141280569, 220.32199646999263, 73.71014194179845, 218.00390238268392, 217.92807146591878, 221.4872405102115, 228.61571687965687, 235.02505360613588, 115.99442316010158, 111.64481168668206, 108.1864691023992, 105.88108683354069, 103.52107689603578, 103.2030494513607, 100.32571762648988, 99.48965834419508, 1.2578355624660702]}}]

    # 1
    # 2
    # (2,)
    # data_list = [({'title': 'CAR_Prediction_2Th_X', 'data': {'Prediction_exp_2th_x': [-154.71197616483303, -158.4396488542488, -160.62174593705086, -162.80547447830875, -164.76973120507964, -166.95249221575665, -169.13673481110396, -218.17142213300554, -220.45913419670634, -238.29084019805072, -240.49235060024114, -242.65648641609243, -244.8189626404436, -246.97989434505826, -249.14248845251228, -231.4397420489885, -231.17296345946602, -231.82265772492138, -232.5435793096778, -233.30282168232628, -231.8828037843862, -230.74434587359255, -230.21752765497047, -230.08251072718122, -230.171874391839, -229.96929629144987, -229.76667909631198, -229.56416803444273, -229.36047382329505, -130.28716771973367, -124.59109754092935, -120.58163299530013, -117.17278173647071, -114.0047198589174, -111.2544771452545, -108.19538399881783, -105.13139541760664, -102.06742478418704, -108.16507393625315, -108.30320458932391, -107.99705301274986, -100.96732207341401, -95.69823524502743, -91.9726158363606, -89.41792119243972, -87.32651309223124, -85.6466830600892, -83.79228159454988, -85.08070407405184, -85.62730584979924, -85.13119151832645, -84.80236055095655, -84.44289495374588, -84.26376012168704, -84.08022654361075, -83.21308039368627, -83.47689166282461, -83.02848612021515, -82.2244722262489, -83.66450295183292, -84.14148620845724, -83.90956034603653, -83.22711436078855, -82.79888238323981, -82.36854487501112, -81.94035129254357, -81.51224518135315, -99.5398439766393], 'Prediction_real_2th_x': [-227.44572487463782, -227.26720615721436, -227.04734389388116, -226.8243801449197, -226.60045435237527, -226.37519046149148, -226.15046428873464, -225.7490273322537, -225.4405062732326, -224.74056156134034, -224.23921764513491, -224.06988051950466, -224.08259913493941, -224.06953720678106, -224.03158724671397, -223.98022091231798, -223.92057541751953, -223.8730837952654, -223.82543353460358, -223.7827371316297, -223.73527612101225, -223.68738527346804, -223.55332634463892, -223.4986847103826, -223.45126320001617, -223.3679531125174, -223.13414557258423, -222.9110163407508, -222.7151325693829, -222.5099752393463, -222.51512302309635, -222.50091609615438, -222.517590435584, -222.50285951072962, -222.46802746772127, -222.43605568849043, -222.4040583011383, -222.37211367782635, -222.3401217084002, -221.00238141261372, -220.6849470138164, -220.54614112230396, -220.48030031621138, -220.39628990684986, -219.79168244724795, -219.69704507464343, -219.60247902588588, -219.50787942428624, -220.13663889489948, -220.07468818191808, -219.97643254720754, -219.9309857470454, -219.8598478276055, -219.94892809988613, -219.97705203735677, -219.96652395809474, -219.9271701082953, -219.86846734530423, -219.24133360432617, -219.66096073240251, -219.65728512647465, -219.67396018846546, -219.68478905733883, -219.61122566344648, -219.57905378672342, -219.5473456726576, -219.52759792336704, -219.50831779567923], 'Prediction_diff_2th_x': [72.73374870980479, 68.82755730296557, 66.4255979568303, 64.01890566661095, 61.83072314729563, 59.422698245734836, 57.013729477630676, 7.577605199248154, 4.981372076526242, -13.550278636710374, -16.253132955106224, -18.58660589658777, -20.736363505504187, -22.910357138277192, -25.110901205798314, -7.459521136670531, -7.252388041946489, -7.9495739296559975, -8.71814577507422, -9.520084550696595, -8.14752766337395, -7.056960600124512, -6.664201310331549, -6.583826016798611, -6.720611191822826, -6.601343178932467, -6.632533523727744, -6.653151693691939, -6.645341253912164, 92.22280751961262, 97.924025482167, 101.91928310085426, 105.34480869911329, 108.49813965181222, 111.21355032246677, 114.2406716896726, 117.27266288353165, 120.30468889363931, 114.17504777214705, 112.6991768232898, 112.68789400106655, 119.57881904888995, 124.78206507118395, 128.42367407048926, 130.37376125480824, 132.3705319824122, 133.95579596579668, 135.71559782973637, 135.05593482084765, 134.44738233211882, 134.8452410288811, 135.12862519608888, 135.41695287385963, 135.6851679781991, 135.896825493746, 136.75344356440849, 136.45027844547067, 136.83998122508908, 137.01686137807727, 135.99645778056959, 135.51579891801742, 135.76439984242893, 136.45767469655027, 136.81234328020668, 137.21050891171228, 137.60699438011403, 138.01535274201387, 119.96847381903993]}}, {'title': 'CAR_Prediction_2Th_Y', 'data': {'Prediction_exp_2th_y': [-122.76208723686281, -124.30854448301005, -125.20980481039769, -126.1117389706746, -126.9230258169819, -127.82456036308264, -128.72670684047438, -76.03111509783596, -70.95027956334361, -67.90323267700892, -66.00708646496149, -63.453014275191364, -60.900900703945, -58.35060994570172, -55.798357251045246, -44.48840578759015, -40.281237798333166, -37.03951910630453, -34.44667809234077, -31.784923970338866, -24.652519555111077, -19.017454998277724, -14.66251536368559, -11.166850549045346, -8.201824997646455, -4.846683308606181, -1.4908941240018194, 1.8631372587794104, 5.236764212161923, 23.275088402551287, 18.77052854747553, 16.45595882877773, 15.658278133981877, 15.407370314070356, 15.381610911847911, 14.716305374111759, 14.049935154880401, 13.383568839016664, 3.85575304924312, 1.9662505214411166, 1.1626184894038891, -4.669132249924251, -8.613416890153793, -12.21981823273057, -15.325232182571675, -17.49972397862005, -18.991858856364267, -20.44733733960758, -23.55756255183203, -27.194351782969406, -30.151666936505677, -34.40177291631667, -38.59561841242448, -41.61193188433217, -45.03426565749851, -48.00632044605392, -51.2784770952291, -54.24759082390814, -56.76684495087417, -60.10572822041786, -63.22069385623407, -66.20523519536216, -69.09848841007123, -72.12898046862679, -75.17437284836144, -78.20459319439966, -81.23419452778911, -93.79731578257113], 'Prediction_real_2th_y': [-78.00413450353702, -79.13823941126586, -79.6448889795417, -80.17016666481227, -80.69651867868484, -81.22231887833196, -81.74512756540415, -81.49070134686525, -82.36173175473613, -83.90999686905957, -84.44006036938804, -81.8623136287441, -81.15608778175609, -81.04765538222989, -81.02153676152169, -81.03985571578966, -81.0847634532836, -81.09149676221621, -81.09825256272431, -81.10430601084609, -81.11103497969518, -81.11782489034161, -81.81457905196041, -81.95653637628966, -82.06693198392574, -83.69526056335215, -84.98706529726444, -85.85436098028995, -86.44252293069641, -86.37670198838869, -85.14164976747627, -83.83778104910127, -83.70747173105843, -83.66240884284102, -83.67760219947596, -83.66854662219482, -83.6594837917571, -83.65043590602545, -83.64137461014253, -86.09829035381752, -88.6624634673828, -88.3786044508575, -88.6316201450094, -88.43441892320881, -88.24715564077493, -88.41496531860483, -88.58264852597749, -88.75039122878486, -87.48472692078826, -87.55290281307319, -87.69968728582624, -87.76040712986446, -87.87215460232854, -87.73646900755965, -87.64646588496483, -87.62272465893275, -87.65017933476732, -87.7132093307844, -88.73449011506591, -88.13151238281742, -88.170043812091, -88.10098886413522, -87.99892702485748, -88.09790569424258, -88.08192026471323, -88.0698192968309, -88.07333289461026, -88.08091650844119], 'Prediction_diff_2th_y': [-44.757952733325794, -45.170305071744195, -45.56491583085598, -45.94157230586232, -46.226507138297066, -46.60224148475068, -46.98157927507023, 5.459586249029286, 11.411452191392513, 16.006764192050653, 18.432973904426547, 18.40929935355274, 20.255187077811087, 22.69704543652817, 25.22317951047644, 36.5514499281995, 40.803525654950434, 44.05197765591168, 46.651574470383544, 49.31938204050722, 56.4585154245841, 62.10036989206388, 67.15206368827482, 70.78968582724431, 73.86510698627929, 78.84857725474598, 83.49617117326261, 87.71749823906936, 91.67928714285833, 109.65179039093998, 103.9121783149518, 100.293739877879, 99.36574986504031, 99.06977915691138, 99.05921311132387, 98.38485199630658, 97.7094189466375, 97.03400474504211, 87.49712765938565, 88.06454087525863, 89.82508195678669, 83.70947220093325, 80.01820325485562, 76.21460069047824, 72.92192345820325, 70.91524133998477, 69.59078966961323, 68.30305388917728, 63.92716436895623, 60.35855103010378, 57.548020349320566, 53.35863421354779, 49.27653618990406, 46.124537123227476, 42.61220022746632, 39.616404212878834, 36.371702239538216, 33.465618506876254, 31.967645164191737, 28.02578416239956, 24.949349955856924, 21.895753668773054, 18.900438614786253, 15.968925225615791, 12.90754741635179, 9.865226102431237, 6.839138366821146, -5.716399274129941]}}, {'title': 'CAR_Prediction_2Th_Ori', 'data': {'Prediction_exp_2th_Ori': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Prediction_real_2th_Ori': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Prediction_diff_2th_Ori': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}}), ({'title': 'CAR_Prediction_3Th_X', 'data': {'Prediction_exp_3th_x': [-154.71197616483303, -158.4396488542488, -160.62174593705086, -162.80547447830875, -164.76973120507964, -166.95249221575665, -169.13673481110396, -218.17142213300554, -220.45913419670634, -238.29084019805072, -240.49235060024114, -242.65648641609243, -244.8189626404436, -246.97989434505826, -249.14248845251228, -231.4397420489885, -231.17296345946602, -231.82265772492138, -232.5435793096778, -233.30282168232628, -231.8828037843862, -230.74434587359255, -230.21752765497047, -230.08251072718122, -230.171874391839, -229.96929629144987, -229.76667909631198, -229.56416803444273, -229.36047382329505, -130.28716771973367, -124.59109754092935, -120.58163299530013, -117.17278173647071, -114.0047198589174, -111.2544771452545, -108.19538399881783, -105.13139541760664, -102.06742478418704, -108.16507393625315, -108.30320458932391, -107.99705301274986, -100.96732207341401, -95.69823524502743, -91.9726158363606, -89.41792119243972, -87.32651309223124, -85.6466830600892, -83.79228159454988, -85.08070407405184, -85.62730584979924, -85.13119151832645, -84.80236055095655, -84.44289495374588, -84.26376012168704, -84.08022654361075, -83.21308039368627, -83.47689166282461, -83.02848612021515, -82.2244722262489, -83.66450295183292, -84.14148620845724, -83.90956034603653, -83.22711436078855, -82.79888238323981, -82.36854487501112, -81.94035129254357, -81.51224518135315, -99.5398439766393], 'Prediction_real_3th_x': [-227.44572487463782, -227.26720615721436, -227.04734389388116, -226.8243801449197, -226.60045435237527, -226.37519046149148, -226.15046428873464, -225.7490273322537, -225.4405062732326, -224.74056156134034, -224.23921764513491, -224.06988051950466, -224.08259913493941, -224.06953720678106, -224.03158724671397, -223.98022091231798, -223.92057541751953, -223.8730837952654, -223.82543353460358, -223.7827371316297, -223.73527612101225, -223.68738527346804, -223.55332634463892, -223.4986847103826, -223.45126320001617, -223.3679531125174, -223.13414557258423, -222.9110163407508, -222.7151325693829, -222.5099752393463, -222.51512302309635, -222.50091609615438, -222.517590435584, -222.50285951072962, -222.46802746772127, -222.43605568849043, -222.4040583011383, -222.37211367782635, -222.3401217084002, -221.00238141261372, -220.6849470138164, -220.54614112230396, -220.48030031621138, -220.39628990684986, -219.79168244724795, -219.69704507464343, -219.60247902588588, -219.50787942428624, -220.13663889489948, -220.07468818191808, -219.97643254720754, -219.9309857470454, -219.8598478276055, -219.94892809988613, -219.97705203735677, -219.96652395809474, -219.9271701082953, -219.86846734530423, -219.24133360432617, -219.66096073240251, -219.65728512647465, -219.67396018846546, -219.68478905733883, -219.61122566344648, -219.57905378672342, -219.5473456726576, -219.52759792336704, -219.50831779567923], 'Prediction_diff_3th_x': [72.73374870980479, 68.82755730296557, 66.4255979568303, 64.01890566661095, 61.83072314729563, 59.422698245734836, 57.013729477630676, 7.577605199248154, 4.981372076526242, -13.550278636710374, -16.253132955106224, -18.58660589658777, -20.736363505504187, -22.910357138277192, -25.110901205798314, -7.459521136670531, -7.252388041946489, -7.9495739296559975, -8.71814577507422, -9.520084550696595, -8.14752766337395, -7.056960600124512, -6.664201310331549, -6.583826016798611, -6.720611191822826, -6.601343178932467, -6.632533523727744, -6.653151693691939, -6.645341253912164, 92.22280751961262, 97.924025482167, 101.91928310085426, 105.34480869911329, 108.49813965181222, 111.21355032246677, 114.2406716896726, 117.27266288353165, 120.30468889363931, 114.17504777214705, 112.6991768232898, 112.68789400106655, 119.57881904888995, 124.78206507118395, 128.42367407048926, 130.37376125480824, 132.3705319824122, 133.95579596579668, 135.71559782973637, 135.05593482084765, 134.44738233211882, 134.8452410288811, 135.12862519608888, 135.41695287385963, 135.6851679781991, 135.896825493746, 136.75344356440849, 136.45027844547067, 136.83998122508908, 137.01686137807727, 135.99645778056959, 135.51579891801742, 135.76439984242893, 136.45767469655027, 136.81234328020668, 137.21050891171228, 137.60699438011403, 138.01535274201387, 119.96847381903993]}}, {'title': 'CAR_Prediction_3Th_Y', 'data': {'Prediction_exp_3th_y': [-122.76208723686281, -124.30854448301005, -125.20980481039769, -126.1117389706746, -126.9230258169819, -127.82456036308264, -128.72670684047438, -76.03111509783596, -70.95027956334361, -67.90323267700892, -66.00708646496149, -63.453014275191364, -60.900900703945, -58.35060994570172, -55.798357251045246, -44.48840578759015, -40.281237798333166, -37.03951910630453, -34.44667809234077, -31.784923970338866, -24.652519555111077, -19.017454998277724, -14.66251536368559, -11.166850549045346, -8.201824997646455, -4.846683308606181, -1.4908941240018194, 1.8631372587794104, 5.236764212161923, 23.275088402551287, 18.77052854747553, 16.45595882877773, 15.658278133981877, 15.407370314070356, 15.381610911847911, 14.716305374111759, 14.049935154880401, 13.383568839016664, 3.85575304924312, 1.9662505214411166, 1.1626184894038891, -4.669132249924251, -8.613416890153793, -12.21981823273057, -15.325232182571675, -17.49972397862005, -18.991858856364267, -20.44733733960758, -23.55756255183203, -27.194351782969406, -30.151666936505677, -34.40177291631667, -38.59561841242448, -41.61193188433217, -45.03426565749851, -48.00632044605392, -51.2784770952291, -54.24759082390814, -56.76684495087417, -60.10572822041786, -63.22069385623407, -66.20523519536216, -69.09848841007123, -72.12898046862679, -75.17437284836144, -78.20459319439966, -81.23419452778911, -93.79731578257113], 'Prediction_real_3th_y': [-78.00413450353702, -79.13823941126586, -79.6448889795417, -80.17016666481227, -80.69651867868484, -81.22231887833196, -81.74512756540415, -81.49070134686525, -82.36173175473613, -83.90999686905957, -84.44006036938804, -81.8623136287441, -81.15608778175609, -81.04765538222989, -81.02153676152169, -81.03985571578966, -81.0847634532836, -81.09149676221621, -81.09825256272431, -81.10430601084609, -81.11103497969518, -81.11782489034161, -81.81457905196041, -81.95653637628966, -82.06693198392574, -83.69526056335215, -84.98706529726444, -85.85436098028995, -86.44252293069641, -86.37670198838869, -85.14164976747627, -83.83778104910127, -83.70747173105843, -83.66240884284102, -83.67760219947596, -83.66854662219482, -83.6594837917571, -83.65043590602545, -83.64137461014253, -86.09829035381752, -88.6624634673828, -88.3786044508575, -88.6316201450094, -88.43441892320881, -88.24715564077493, -88.41496531860483, -88.58264852597749, -88.75039122878486, -87.48472692078826, -87.55290281307319, -87.69968728582624, -87.76040712986446, -87.87215460232854, -87.73646900755965, -87.64646588496483, -87.62272465893275, -87.65017933476732, -87.7132093307844, -88.73449011506591, -88.13151238281742, -88.170043812091, -88.10098886413522, -87.99892702485748, -88.09790569424258, -88.08192026471323, -88.0698192968309, -88.07333289461026, -88.08091650844119], 'Prediction_diff_3th_y': [-44.757952733325794, -45.170305071744195, -45.56491583085598, -45.94157230586232, -46.226507138297066, -46.60224148475068, -46.98157927507023, 5.459586249029286, 11.411452191392513, 16.006764192050653, 18.432973904426547, 18.40929935355274, 20.255187077811087, 22.69704543652817, 25.22317951047644, 36.5514499281995, 40.803525654950434, 44.05197765591168, 46.651574470383544, 49.31938204050722, 56.4585154245841, 62.10036989206388, 67.15206368827482, 70.78968582724431, 73.86510698627929, 78.84857725474598, 83.49617117326261, 87.71749823906936, 91.67928714285833, 109.65179039093998, 103.9121783149518, 100.293739877879, 99.36574986504031, 99.06977915691138, 99.05921311132387, 98.38485199630658, 97.7094189466375, 97.03400474504211, 87.49712765938565, 88.06454087525863, 89.82508195678669, 83.70947220093325, 80.01820325485562, 76.21460069047824, 72.92192345820325, 70.91524133998477, 69.59078966961323, 68.30305388917728, 63.92716436895623, 60.35855103010378, 57.548020349320566, 53.35863421354779, 49.27653618990406, 46.124537123227476, 42.61220022746632, 39.616404212878834, 36.371702239538216, 33.465618506876254, 31.967645164191737, 28.02578416239956, 24.949349955856924, 21.895753668773054, 18.900438614786253, 15.968925225615791, 12.90754741635179, 9.865226102431237, 6.839138366821146, -5.716399274129941]}}, {'title': 'CAR_Prediction_3Th_Ori', 'data': {'Prediction_exp_3th_Ori': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Prediction_real_3th_Ori': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Prediction_diff_3th_Ori': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}})]
    # 2
    # 3
    # (2, 3)
    # print(data_list[0][0]['data'].keys())
    generate_line_rows(data_list, './tt.png')
